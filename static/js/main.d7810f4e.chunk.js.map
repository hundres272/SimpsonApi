{"version":3,"sources":["components/character.js","App.js","serviceWorker.js","index.js"],"names":["Character","quote","character","image","className","src","alt","App","useState","dataCharacter","setdataCharacter","key","onClick","fetch","then","res","json","data","catch","error","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"0PAyBeA,MAvBf,YAA8C,IAAzBC,EAAwB,EAAxBA,MAAMC,EAAkB,EAAlBA,UAAUC,EAAQ,EAARA,MACjC,OACI,oCACI,yBAAKC,UAAU,mBACX,4BAAKF,IAET,yBAAKE,UAAU,eACX,yBAAKA,UAAU,aACX,2BACKF,IAGT,yBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,yBAAKE,UAAU,SACX,yBAAKA,UAAU,gBACX,2BAAIH,QCgCbM,MA5Cf,WAAgB,IAAD,EAE6BC,mBAAS,CACjDP,MAAO,gBACPC,UAAW,eACXC,MACE,gGANS,mBAENM,EAFM,KAESC,EAFT,KA+Bb,OACE,yBAAKN,UAAU,OACb,6BAASA,UAAU,cACjB,yDAEF,6BAASA,UAAU,aACjB,kBAAC,EAAD,CAAWO,IAAKF,EAAcP,UAAWD,MAAOQ,EAAcR,MAAOE,MAAOM,EAAcN,MAAOD,UAAWO,EAAcP,YAC1H,4BAAQE,UAAU,UAAUQ,QA7BlC,WACEF,EAAiB,CACfT,MAAO,cACPE,MAAO,gBACPD,UAAW,gBAGbW,MADY,oDAEXC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJ,OACEP,EAAiB,CACfT,MAAOgB,EAAK,GAAGhB,MACfE,MAAOc,EAAK,GAAGd,MACfD,UAAWe,EAAK,GAAGf,eAIxBgB,OAAM,SAAAC,GAAK,OAAIC,MAAM,kEAUlB,gBC/BYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLiB,QAAQjB,MAAMA,EAAMkB,c","file":"static/js/main.d7810f4e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Character ({quote,character,image}) {\r\n    return (\r\n        <>\r\n            <div className='title-Character'>\r\n                <h2>{character}</h2>\r\n            </div>\r\n            <div className='image-quote'>\r\n                <div className=\"text-vert\">\r\n                    <p>\r\n                        {character}\r\n                    </p>\r\n                </div>\r\n                <img src={image} alt={character} />\r\n                <div className='quote'>\r\n                    <div className='center-quote'>\r\n                        <p>{quote}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Character","import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Character from './components/character'\n\nfunction App() {\n\n  const [dataCharacter, setdataCharacter] = useState({\n    quote: \"Eat my shorts\",\n    character: \"Bart Simpson\",\n    image:\n      \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FBartSimpson.png?1497567511638\"\n  })\n\n  function requestAPI() {\n    setdataCharacter({\n      quote: \"Loading ...\",\n      image: \"./loading.svg\",\n      character: \"Loading ...\"\n    });\n    const url = 'https://simpsons-quotes-api.herokuapp.com/quotes'\n    fetch(url)\n    .then(res => res.json())\n    .then(data => {\n      // console.log(\"llego\")\n      return(\n        setdataCharacter({\n          quote: data[0].quote,\n          image: data[0].image,\n          character: data[0].character\n        })\n      )\n    })\n    .catch(error => alert(\"Al parecer hay un error, es posible que no tenga internet\"))\n  }\n\n  return (\n    <div className=\"App\">\n      <section className='title-page'>\n        <h1>Peronajes de los simpson</h1>\n      </section>\n      <section className='character'>\n        <Character key={dataCharacter.character} quote={dataCharacter.quote} image={dataCharacter.image} character={dataCharacter.character} />\n        <button className='success' onClick={requestAPI}>Siguiente</button>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}